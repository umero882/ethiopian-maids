import React from 'react';
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Label } from '@/components/ui/label';
import { Textarea } from '@/components/ui/textarea';
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';
import { Building, Upload, ChevronRight, UserCheck } from 'lucide-react';
import MultiSelect from '@/components/ui/multi-select';
import FileUpload from '@/components/ui/FileUpload';
import { toast } from '@/components/ui/use-toast';
import { useAuth } from '@/contexts/AuthContext';

const AgencyFormPage1 = ({
  formData,
  formErrors,
  verificationState,
  availableCountries,
  citiesByCountry,
  onInputChange,
  onSelectChange,
  onMultiSelectChange,
  onFileUpload,
  onFileRemove,
  onSendVerificationCode,
  onVerifyCode,
  onVerificationCodeChange,
  onNext,
  onSaveDraft,
  onUseRegistrationData
}) => {
  const { user } = useAuth();

  const handleUseRegistrationPhone = () => {
    if (user?.phone) {
      onUseRegistrationData('contactPhone', user.phone);
      toast({
        title: "Phone Updated",
        description: "Your registration phone number has been added.",
      });
    } else {
      toast({
        title: "No Phone Found",
        description: "No phone number found in your registration data.",
        variant: "destructive",
      });
    }
  };

  const handleUseRegistrationEmail = () => {
    if (user?.email) {
      onUseRegistrationData('officialEmail', user.email);
      toast({
        title: "Email Updated",
        description: "Your registration email has been added.",
      });
    } else {
      toast({
        title: "No Email Found",
        description: "No email found in your registration data.",
        variant: "destructive",
      });
    }
  };

  const handleNext = () => {
    // Validate required fields for page 1
    const errors = {};

    if (!formData.logo && !formData.logoFile) {
      errors.logoFile = 'Agency logo is required';
    }
    if (!formData.agencyName?.trim()) {
      errors.agencyName = 'Agency name is required';
    }
    if (!formData.tradeLicenseNumber?.trim()) {
      errors.tradeLicenseNumber = 'Business license number is required';
    }
    if (!formData.countryOfRegistration) {
      errors.countryOfRegistration = 'Country of registration is required';
    }
    if (!formData.operatingCities?.length) {
      errors.operatingCities = 'At least one service area is required';
    }
    if (!formData.headOfficeAddress?.trim()) {
      errors.headOfficeAddress = 'Head office address is required';
    }
    if (!formData.contactPhone?.trim()) {
      errors.contactPhone = 'Contact phone is required';
    }
    if (!formData.officialEmail?.trim()) {
      errors.officialEmail = 'Official email is required';
    } else if (!/^[^\s@]+@[^\s@]+\.[^\s@]+$/.test(formData.officialEmail)) {
      errors.officialEmail = 'Please enter a valid email address';
    }

    if (Object.keys(errors).length > 0) {
      toast({
        title: "Please complete required fields",
        description: "Fill in all required fields before continuing to the next page.",
        variant: "destructive",
      });
      return;
    }

    onNext();
  };

  return (
    <div className="min-h-screen bg-gray-50 py-8">
      <div className="max-w-4xl mx-auto px-4">
        <Card className="shadow-lg border-0">
          <CardHeader className="text-center pb-6">
            <div className="flex items-center justify-center mb-4">
              <div className="p-3 bg-blue-100 rounded-full">
                <Building className="w-8 h-8 text-blue-600" />
              </div>
            </div>
            <CardTitle className="text-2xl font-bold text-gray-900 mb-2">
              Logo & Basic Information
            </CardTitle>
            <p className="text-gray-600">
              Upload your agency logo and provide basic business details
            </p>
            <div className="flex justify-center mt-4">
              <div className="flex items-center space-x-2">
                <div className="w-8 h-8 bg-blue-600 text-white rounded-full flex items-center justify-center text-sm font-bold">1</div>
                <div className="w-8 h-1 bg-gray-300 rounded"></div>
                <div className="w-8 h-8 bg-gray-300 text-gray-600 rounded-full flex items-center justify-center text-sm font-bold">2</div>
                <div className="w-8 h-1 bg-gray-300 rounded"></div>
                <div className="w-8 h-8 bg-gray-300 text-gray-600 rounded-full flex items-center justify-center text-sm font-bold">3</div>
              </div>
            </div>
          </CardHeader>

          <CardContent className="space-y-8">
            {/* Logo Upload Section */}
            <div className="space-y-4">
              <div className="flex items-center gap-2">
                <Upload className="w-5 h-5 text-blue-600" />
                <h3 className="text-lg font-semibold text-gray-900">Agency Logo</h3>
              </div>
              <div className="pl-7">
                <FileUpload
                  accept="image/*"
                  maxSize={2 * 1024 * 1024} // 2MB
                  onFileSelect={(file, error) => {
                    if (error) {
                      toast({
                        title: "Upload Error",
                        description: error,
                        variant: "destructive",
                      });
                    } else {
                      onFileUpload('logoFile', file, file ? URL.createObjectURL(file) : null);
                    }
                  }}
                  onFileRemove={() => onFileRemove('logoFile')}
                  preview={formData.logoFilePreview || formData.logo}
                  title="Upload Agency Logo"
                  description="Upload your agency's official logo"
                  className="max-w-sm"
                />
                {formErrors.logoFile && (
                  <p className="text-sm text-red-500 mt-2" role="alert">
                    {formErrors.logoFile}
                  </p>
                )}
              </div>
            </div>

            {/* Basic Information Section */}
            <div className="space-y-4">
              <div className="flex items-center gap-2">
                <Building className="w-5 h-5 text-blue-600" />
                <h3 className="text-lg font-semibold text-gray-900">Basic Information</h3>
              </div>
              <div className="pl-7 space-y-6">
                {/* Agency Name */}
                <div className="space-y-2">
                  <Label htmlFor="agencyName" className="text-sm font-medium text-gray-700">
                    Agency Name (Full Name) <span className="text-red-500">*</span>
                  </Label>
                  <Input
                    id="agencyName"
                    name="agencyName"
                    type="text"
                    placeholder="Kafi Agency"
                    value={formData.agencyName || ''}
                    onChange={onInputChange}
                    className="w-full"
                    aria-required="true"
                    aria-invalid={formErrors.agencyName ? 'true' : 'false'}
                  />
                  {formErrors.agencyName && (
                    <p className="text-sm text-red-500 mt-1" role="alert">
                      {formErrors.agencyName}
                    </p>
                  )}
                </div>

                {/* Business License Number */}
                <div className="space-y-2">
                  <Label htmlFor="tradeLicenseNumber" className="text-sm font-medium text-gray-700">
                    Business License Number <span className="text-red-500">*</span>
                  </Label>
                  <Input
                    id="tradeLicenseNumber"
                    name="tradeLicenseNumber"
                    type="text"
                    placeholder="157845"
                    value={formData.tradeLicenseNumber || ''}
                    onChange={onInputChange}
                    aria-required="true"
                    aria-invalid={formErrors.tradeLicenseNumber ? 'true' : 'false'}
                  />
                  {formErrors.tradeLicenseNumber && (
                    <p className="text-sm text-red-500 mt-1" role="alert">
                      {formErrors.tradeLicenseNumber}
                    </p>
                  )}
                </div>

                {/* Country of Registration */}
                <div className="space-y-2">
                  <Label className="text-sm font-medium text-gray-700">
                    Country of Registration <span className="text-red-500">*</span>
                  </Label>
                  <Select
                    value={formData.countryOfRegistration || ''}
                    onValueChange={(value) => onSelectChange('countryOfRegistration', value)}
                    aria-required="true"
                  >
                    <SelectTrigger aria-invalid={formErrors.countryOfRegistration ? 'true' : 'false'}>
                      <SelectValue placeholder="Select country" />
                    </SelectTrigger>
                    <SelectContent>
                      {availableCountries?.map((country) => (
                        <SelectItem key={country} value={country}>
                          {country}
                        </SelectItem>
                      ))}
                    </SelectContent>
                  </Select>
                  {formErrors.countryOfRegistration && (
                    <p className="text-sm text-red-500 mt-1" role="alert">
                      {formErrors.countryOfRegistration}
                    </p>
                  )}
                </div>

                {/* Service Areas */}
                {formData.countryOfRegistration && (
                  <div className="space-y-2">
                    <Label className="text-sm font-medium text-gray-700">
                      Service Areas <span className="text-red-500">*</span>
                    </Label>
                    <MultiSelect
                      options={citiesByCountry?.[formData.countryOfRegistration] || []}
                      selected={formData.operatingCities || []}
                      onChange={(cities) => onMultiSelectChange('operatingCities', cities)}
                      placeholder="Select cities"
                      aria-required="true"
                    />
                    {formErrors.operatingCities && (
                      <p className="text-sm text-red-500 mt-1" role="alert">
                        {formErrors.operatingCities}
                      </p>
                    )}
                  </div>
                )}

                {/* Head Office Address */}
                <div className="space-y-2">
                  <Label htmlFor="headOfficeAddress" className="text-sm font-medium text-gray-700">
                    Head Office Address <span className="text-red-500">*</span>
                  </Label>
                  <Textarea
                    id="headOfficeAddress"
                    name="headOfficeAddress"
                    placeholder="Enter complete address including street, area, and postal code"
                    value={formData.headOfficeAddress || ''}
                    onChange={onInputChange}
                    rows={3}
                    aria-required="true"
                    aria-invalid={formErrors.headOfficeAddress ? 'true' : 'false'}
                  />
                  {formErrors.headOfficeAddress && (
                    <p className="text-sm text-red-500 mt-1" role="alert">
                      {formErrors.headOfficeAddress}
                    </p>
                  )}
                </div>

                {/* Contact Information */}
                <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
                  <div className="space-y-2">
                    <Label htmlFor="contactPhone" className="text-sm font-medium text-gray-700">
                      Contact Phone <span className="text-red-500">*</span>
                    </Label>
                    <div className="space-y-2">
                      <div className="flex gap-2">
                        <Input
                          id="contactPhone"
                          name="contactPhone"
                          type="tel"
                          placeholder="+971 50 123 4567"
                          value={formData.contactPhone || ''}
                          onChange={onInputChange}
                          className="flex-1"
                          aria-required="true"
                          aria-invalid={formErrors.contactPhone ? 'true' : 'false'}
                        />
                        {user?.phone && !formData.contactPhone && (
                          <Button
                            type="button"
                            variant="secondary"
                            size="sm"
                            onClick={handleUseRegistrationPhone}
                            className="flex items-center gap-1 whitespace-nowrap"
                          >
                            <UserCheck className="w-3 h-3" />
                            Use My Phone
                          </Button>
                        )}
                        {!formData.contactPhoneVerified && !verificationState?.contactPhone?.sent && formData.contactPhone && (
                          <Button
                            type="button"
                            variant="outline"
                            size="sm"
                            onClick={() => onSendVerificationCode('contactPhone', formData.contactPhone)}
                            disabled={!formData.contactPhone?.trim() || verificationState?.contactPhone?.sending}
                          >
                            {verificationState?.contactPhone?.sending ? 'Sending...' : 'Send Code'}
                          </Button>
                        )}
                        {formData.contactPhoneVerified && (
                          <Button
                            type="button"
                            variant="default"
                            size="sm"
                            disabled
                            className="bg-green-600 hover:bg-green-600"
                          >
                            Verified âœ“
                          </Button>
                        )}
                      </div>
                      {verificationState?.contactPhone?.sent && !formData.contactPhoneVerified && (
                        <div className="flex gap-2">
                          <Input
                            type="text"
                            placeholder="Enter 6-digit code"
                            value={verificationState.contactPhone.code || ''}
                            onChange={(e) => onVerificationCodeChange('contactPhone', e.target.value)}
                            className="flex-1"
                            maxLength={6}
                            disabled={verificationState.contactPhone.verifying}
                          />
                          <Button
                            type="button"
                            variant="outline"
                            size="sm"
                            onClick={() => onVerifyCode('contactPhone', verificationState.contactPhone.code)}
                            disabled={!verificationState.contactPhone.code || verificationState.contactPhone.verifying}
                          >
                            {verificationState.contactPhone.verifying ? 'Verifying...' : 'Verify'}
                          </Button>
                        </div>
                      )}
                    </div>
                    {formErrors.contactPhone && (
                      <p className="text-sm text-red-500 mt-1" role="alert">
                        {formErrors.contactPhone}
                      </p>
                    )}
                  </div>

                  <div className="space-y-2">
                    <Label htmlFor="officialEmail" className="text-sm font-medium text-gray-700">
                      Official Email <span className="text-red-500">*</span>
                    </Label>
                    <div className="space-y-2">
                      <div className="flex gap-2">
                        <Input
                          id="officialEmail"
                          name="officialEmail"
                          type="email"
                          placeholder="contact@kafiagency.com"
                          value={formData.officialEmail || ''}
                          onChange={onInputChange}
                          className="flex-1"
                          disabled={verificationState?.officialEmail?.sending}
                          aria-required="true"
                          aria-invalid={formErrors.officialEmail ? 'true' : 'false'}
                        />
                        {user?.email && !formData.officialEmail && (
                          <Button
                            type="button"
                            variant="secondary"
                            size="sm"
                            onClick={handleUseRegistrationEmail}
                            className="flex items-center gap-1 whitespace-nowrap"
                          >
                            <UserCheck className="w-3 h-3" />
                            Use My Email
                          </Button>
                        )}
                        {!formData.officialEmailVerified && !verificationState?.officialEmail?.sent && formData.officialEmail && (
                          <Button
                            type="button"
                            variant="outline"
                            size="sm"
                            onClick={() => onSendVerificationCode('officialEmail', formData.officialEmail)}
                            disabled={!formData.officialEmail?.trim() || verificationState?.officialEmail?.sending}
                          >
                            {verificationState?.officialEmail?.sending ? 'Sending...' : 'Send Code'}
                          </Button>
                        )}
                        {formData.officialEmailVerified && (
                          <Button
                            type="button"
                            variant="default"
                            size="sm"
                            disabled
                            className="bg-green-600 hover:bg-green-600"
                          >
                            Verified âœ“
                          </Button>
                        )}
                      </div>
                      {verificationState?.officialEmail?.sent && !formData.officialEmailVerified && (
                        <div className="flex gap-2">
                          <Input
                            type="text"
                            placeholder="Enter 6-digit code"
                            value={verificationState.officialEmail.code || ''}
                            onChange={(e) => onVerificationCodeChange('officialEmail', e.target.value)}
                            className="flex-1"
                            maxLength={6}
                            disabled={verificationState.officialEmail.verifying}
                          />
                          <Button
                            type="button"
                            variant="outline"
                            size="sm"
                            onClick={() => onVerifyCode('officialEmail', verificationState.officialEmail.code)}
                            disabled={!verificationState.officialEmail.code || verificationState.officialEmail.verifying}
                          >
                            {verificationState.officialEmail.verifying ? 'Verifying...' : 'Verify'}
                          </Button>
                        </div>
                      )}
                    </div>
                    {formErrors.officialEmail && (
                      <p className="text-sm text-red-500 mt-1" role="alert">
                        {formErrors.officialEmail}
                      </p>
                    )}
                  </div>
                </div>

                {/* Website (Optional) */}
                <div className="space-y-2">
                  <Label htmlFor="website" className="text-sm font-medium text-gray-700">
                    Website (Optional)
                  </Label>
                  <Input
                    id="website"
                    name="website"
                    type="url"
                    placeholder="https://www.kafiagency.com"
                    value={formData.website || ''}
                    onChange={onInputChange}
                  />
                  {formErrors.website && (
                    <p className="text-sm text-red-500 mt-1" role="alert">
                      {formErrors.website}
                    </p>
                  )}
                </div>

                {/* Demo Instructions */}
                {(verificationState?.contactPhone?.sent || verificationState?.officialEmail?.sent) && (
                  <div className="bg-blue-50 border border-blue-200 rounded-lg p-3">
                    <p className="text-sm text-blue-800">
                      <strong>Demo Mode:</strong> For testing, use verification codes: <code>123456</code>, <code>000000</code>, or <code>111111</code>
                    </p>
                  </div>
                )}
              </div>
            </div>
          </CardContent>

          {/* Navigation */}
          <div className="flex justify-between items-center p-6 border-t">
            <Button
              type="button"
              variant="outline"
              onClick={onSaveDraft}
            >
              Save Draft
            </Button>

            <Button
              type="button"
              onClick={handleNext}
              className="flex items-center space-x-2"
            >
              <span>Next Page</span>
              <ChevronRight className="w-4 h-4" />
            </Button>
          </div>
        </Card>
      </div>
    </div>
  );
};

export default AgencyFormPage1;