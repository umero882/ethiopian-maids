/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */


export interface paths {
  "/auth/register": {
    /** Register new user */
    post: operations["registerUser"];
  };
  "/auth/login": {
    /** Sign in user */
    post: operations["loginUser"];
  };
  "/auth/logout": {
    /** Sign out current user */
    post: operations["logoutUser"];
  };
  "/auth/me": {
    /** Get current user */
    get: operations["getCurrentUser"];
  };
  "/profiles/maids": {
    /** List maid profiles */
    get: operations["listMaidProfiles"];
  };
  "/profiles/maids/{maidId}": {
    /** Get maid profile by ID */
    get: operations["getMaidProfile"];
    /** Update maid profile */
    put: operations["updateMaidProfile"];
  };
  "/jobs": {
    /** List job postings */
    get: operations["listJobs"];
    /** Create job posting */
    post: operations["createJob"];
  };
  "/jobs/{jobId}": {
    /** Get job by ID */
    get: operations["getJob"];
  };
  "/jobs/{jobId}/apply": {
    /** Apply to job */
    post: operations["applyToJob"];
  };
  "/subscriptions/plans": {
    /** List available plans */
    get: operations["listPlans"];
  };
  "/subscriptions": {
    /** Get current subscription */
    get: operations["getCurrentSubscription"];
    /** Create subscription */
    post: operations["createSubscription"];
  };
}

export type webhooks = Record<string, never>;

export interface components {
  schemas: {
    User: {
      /** Format: uuid */
      id?: string;
      /** Format: email */
      email?: string;
      /** @enum {string} */
      role?: "maid" | "sponsor" | "agency" | "admin";
      emailVerified?: boolean;
      phoneVerified?: boolean;
      /** @enum {string} */
      status?: "active" | "suspended" | "deleted";
      /** Format: date-time */
      createdAt?: string;
    };
    Session: {
      accessToken?: string;
      refreshToken?: string;
      /** Format: date-time */
      expiresAt?: string;
    };
    MaidProfile: {
      /** Format: uuid */
      id?: string;
      /** Format: uuid */
      userId?: string;
      fullName?: string;
      /** Format: date */
      dateOfBirth?: string;
      nationality?: string;
      experienceYears?: number;
      skills?: string[];
      languages?: string[];
      preferredSalaryMin?: number;
      preferredSalaryMax?: number;
      /** @enum {string} */
      availabilityStatus?: "available" | "busy" | "hired" | "inactive";
      profileCompletionPercentage?: number;
    };
    MaidProfileInput: {
      fullName?: string;
      /** Format: date */
      dateOfBirth?: string;
      nationality?: string;
      experienceYears?: number;
      skills?: string[];
      languages?: string[];
    };
    Job: {
      /** Format: uuid */
      id?: string;
      /** Format: uuid */
      sponsorId?: string;
      title?: string;
      location?: string;
      salaryMin?: number;
      salaryMax?: number;
      description?: string;
      requirements?: string[];
      /** @enum {string} */
      status?: "open" | "closed" | "filled";
      /** Format: date-time */
      createdAt?: string;
    };
    JobInput: {
      title: string;
      location: string;
      salaryMin: number;
      salaryMax?: number;
      description: string;
      requirements?: string[];
    };
    Application: {
      /** Format: uuid */
      id?: string;
      /** Format: uuid */
      jobId?: string;
      /** Format: uuid */
      maidId?: string;
      coverLetter?: string;
      /** @enum {string} */
      status?: "pending" | "reviewed" | "accepted" | "rejected";
      /** Format: date-time */
      createdAt?: string;
    };
    SubscriptionPlan: {
      id?: string;
      name?: string;
      description?: string;
      priceMonthly?: number;
      priceAnnual?: number;
      features?: string[];
      /** @enum {string} */
      role?: "maid" | "sponsor" | "agency";
    };
    Subscription: {
      /** Format: uuid */
      id?: string;
      /** Format: uuid */
      userId?: string;
      planId?: string;
      /** @enum {string} */
      status?: "active" | "past_due" | "canceled" | "incomplete";
      /** Format: date-time */
      currentPeriodStart?: string;
      /** Format: date-time */
      currentPeriodEnd?: string;
    };
    Pagination: {
      page?: number;
      pageSize?: number;
      total?: number;
      totalPages?: number;
    };
    Error: {
      message?: string;
      code?: string;
      errors?: {
          field?: string;
          message?: string;
        }[];
    };
  };
  responses: {
    /** @description Bad request */
    BadRequest: {
      content: {
        "application/json": components["schemas"]["Error"];
      };
    };
    /** @description Unauthorized */
    Unauthorized: {
      content: {
        "application/json": components["schemas"]["Error"];
      };
    };
    /** @description Forbidden */
    Forbidden: {
      content: {
        "application/json": components["schemas"]["Error"];
      };
    };
    /** @description Resource not found */
    NotFound: {
      content: {
        "application/json": components["schemas"]["Error"];
      };
    };
  };
  parameters: {
    PageParam?: number;
    PageSizeParam?: number;
  };
  requestBodies: never;
  headers: never;
  pathItems: never;
}

export type $defs = Record<string, never>;

export type external = Record<string, never>;

export interface operations {

  /** Register new user */
  registerUser: {
    requestBody: {
      content: {
        "application/json": {
          /**
           * Format: email
           * @example user@example.com
           */
          email: string;
          /**
           * Format: password
           * @example SecurePass123!
           */
          password: string;
          /**
           * @example maid
           * @enum {string}
           */
          role: "maid" | "sponsor" | "agency";
        };
      };
    };
    responses: {
      /** @description User registered successfully */
      201: {
        content: {
          "application/json": {
            /** Format: uuid */
            userId?: string;
            session?: components["schemas"]["Session"];
            user?: components["schemas"]["User"];
          };
        };
      };
      400: components["responses"]["BadRequest"];
      /** @description Email already exists */
      409: {
        content: never;
      };
    };
  };
  /** Sign in user */
  loginUser: {
    requestBody: {
      content: {
        "application/json": {
          /** Format: email */
          email: string;
          /** Format: password */
          password: string;
        };
      };
    };
    responses: {
      /** @description Login successful */
      200: {
        content: {
          "application/json": {
            userId?: string;
            session?: components["schemas"]["Session"];
          };
        };
      };
      401: components["responses"]["Unauthorized"];
    };
  };
  /** Sign out current user */
  logoutUser: {
    responses: {
      /** @description Logout successful */
      204: {
        content: never;
      };
    };
  };
  /** Get current user */
  getCurrentUser: {
    responses: {
      /** @description Current user info */
      200: {
        content: {
          "application/json": components["schemas"]["User"];
        };
      };
      401: components["responses"]["Unauthorized"];
    };
  };
  /** List maid profiles */
  listMaidProfiles: {
    parameters: {
      query?: {
        page?: components["parameters"]["PageParam"];
        pageSize?: components["parameters"]["PageSizeParam"];
        nationality?: string;
        experience?: "0-2" | "3-5" | "6-10" | "10+";
        skills?: string[];
      };
    };
    responses: {
      /** @description Maid profiles list */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["MaidProfile"][];
            pagination?: components["schemas"]["Pagination"];
          };
        };
      };
    };
  };
  /** Get maid profile by ID */
  getMaidProfile: {
    parameters: {
      path: {
        maidId: string;
      };
    };
    responses: {
      /** @description Maid profile */
      200: {
        content: {
          "application/json": components["schemas"]["MaidProfile"];
        };
      };
      404: components["responses"]["NotFound"];
    };
  };
  /** Update maid profile */
  updateMaidProfile: {
    parameters: {
      path: {
        maidId: string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["MaidProfileInput"];
      };
    };
    responses: {
      /** @description Profile updated */
      200: {
        content: {
          "application/json": components["schemas"]["MaidProfile"];
        };
      };
      403: components["responses"]["Forbidden"];
      404: components["responses"]["NotFound"];
    };
  };
  /** List job postings */
  listJobs: {
    parameters: {
      query?: {
        page?: components["parameters"]["PageParam"];
        pageSize?: components["parameters"]["PageSizeParam"];
        location?: string;
        salaryMin?: number;
        salaryMax?: number;
      };
    };
    responses: {
      /** @description Job list */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["Job"][];
            pagination?: components["schemas"]["Pagination"];
          };
        };
      };
    };
  };
  /** Create job posting */
  createJob: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["JobInput"];
      };
    };
    responses: {
      /** @description Job created */
      201: {
        content: {
          "application/json": components["schemas"]["Job"];
        };
      };
      400: components["responses"]["BadRequest"];
      /** @description Only sponsors and agencies can create jobs */
      403: {
        content: never;
      };
    };
  };
  /** Get job by ID */
  getJob: {
    parameters: {
      path: {
        jobId: string;
      };
    };
    responses: {
      /** @description Job details */
      200: {
        content: {
          "application/json": components["schemas"]["Job"];
        };
      };
      404: components["responses"]["NotFound"];
    };
  };
  /** Apply to job */
  applyToJob: {
    parameters: {
      path: {
        jobId: string;
      };
    };
    requestBody?: {
      content: {
        "application/json": {
          coverLetter?: string;
        };
      };
    };
    responses: {
      /** @description Application submitted */
      201: {
        content: {
          "application/json": components["schemas"]["Application"];
        };
      };
      400: components["responses"]["BadRequest"];
      /** @description Only maids can apply to jobs */
      403: {
        content: never;
      };
    };
  };
  /** List available plans */
  listPlans: {
    parameters: {
      query?: {
        role?: "maid" | "sponsor" | "agency";
      };
    };
    responses: {
      /** @description Subscription plans */
      200: {
        content: {
          "application/json": components["schemas"]["SubscriptionPlan"][];
        };
      };
    };
  };
  /** Get current subscription */
  getCurrentSubscription: {
    responses: {
      /** @description Current subscription */
      200: {
        content: {
          "application/json": components["schemas"]["Subscription"];
        };
      };
      /** @description No active subscription */
      404: {
        content: never;
      };
    };
  };
  /** Create subscription */
  createSubscription: {
    requestBody: {
      content: {
        "application/json": {
          /** @description Stripe Price ID */
          priceId: string;
          /** @description Stripe Payment Method ID */
          paymentMethodId: string;
        };
      };
    };
    responses: {
      /** @description Subscription created */
      201: {
        content: {
          "application/json": components["schemas"]["Subscription"];
        };
      };
    };
  };
}
